<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.edu.member">

	<sql id="search">
		<choose>
			<when test="searchOption == 'all'">
				WHERE MNAME LIKE '%'||#{keyword}||'%'
				OR EMAIL LIKE '%'||#{keyword}||'%'
			</when>
			<otherwise>
				WHERE ${searchOption} LIKE '%'||#{keyword}||'%'
			</otherwise>
		</choose>
	</sql>

	<resultMap type="memberDto" id="memberResultMap">
		<id column="MNO" property="no"/>
		<result column="MNAME" property="name"/>
		<result column="EMAIL" property="email"/>
		<result column="PWD" property="password"/>
		<result column="CRE_DATE" property="createDate"
			javaType="java.util.Date"/>
		<result column="MOD_DATE" property="modifyDate"
			javaType="java.util.Date"/>
	</resultMap>

<!-- 	<select id="memberSelectList" resultMap="memberResultMap"> -->
<!-- 		SELECT MNO, MNAME, EMAIL, CRE_DATE  -->
<!-- 		FROM MEMBER  -->
<!-- 		ORDER BY MNO DESC -->
<!-- 	</select> -->
	
	<!-- 페이징처리를 추가한 목록 조회 (ORDER BY MNO ASC 번호 오름차순) -->
	<select id="memberSelectList" resultMap="memberResultMap">
		SELECT PM.MNO, PM.MNAME, PM.EMAIL, PM.CRE_DATE
		   FROM (
		        SELECT ROWNUM RNUM, M.MNO, M.MNAME
		      , M.EMAIL, M.CRE_DATE
		        FROM (
	                SELECT MNO, MNAME, EMAIL, CRE_DATE
	         	   	   FROM MEMBER
	        	      <include refid="search"></include>
			           ORDER BY CRE_DATE DESC) M
      				) PM
		WHERE PM.RNUM BETWEEN #{start} AND #{end}
	</select>

<!-- 	<select id="memberSelectList2" resultMap="memberResultMap"> -->
<!-- 		SELECT MEMBER.RNUM, MNO, EMAIL, MNAME, CRE_DATE -->
<!-- 		FROM ( -->
<!-- 				SELECT ROWNUM RNUM, M.MNO, M.EMAIL, M.MNAME, M.CRE_DATE -->
<!-- 				FROM ( -->
<!-- 				  		SELECT MNO, EMAIL, MNAME, CRE_DATE -->
<!-- 						FROM MEMBER  -->
<!-- 						WHERE MNAME LIKE '%'||#{name}||'%' -->
<!-- 						ORDER BY MNAME ASC) M -->
<!-- 		) MEMBER  -->
<!-- 		WHERE MEMBER.RNUM BETWEEN #{start} AND #{end} -->
<!-- 	</select> -->
	
	<select id="memberExist" parameterType="map"
		resultMap="memberResultMap">
		SELECT MNO, MNAME, EMAIL
		FROM MEMBER
		WHERE EMAIL = #{email} AND PWD = #{pwd} 
	</select>	
	
	<!-- 회원 추가 -->
	<insert id="memberInsertOne" parameterType="com.edu.member.model.MemberDto"
	useGeneratedKeys="true" keyProperty="no">
		
		<selectKey keyProperty="no" resultType="int" order="BEFORE">
			select MEMBER_MNO_SEQ.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO MEMBER
		VALUE(MNO, EMAIL, PWD, MNAME, CRE_DATE, MOD_DATE)
		VALUES(#{no}, #{email}, #{password}, #{name}, SYSDATE, SYSDATE)
	</insert>
	
	<!-- 파일 추가  insertFile 10.17 회원추가에 파일(사진) 추가기능 -->
	<insert id="insertFile" parameterType="memberDto">
		INSERT INTO TB_FILE
		(IDX, PARENT_SEQ, ORIGINAL_FILE_NAME,
		STORED_FILE_NAME, FILE_SIZE, CRE_DATE)
		VALUES
		(TB_FILE_IDX_SEQ.NEXTVAL, #{parentSeq}, #{original_file_name},
		 #{stored_file_name}, #{file_size}, SYSDATE)
	</insert>	
	
	<select id="memberSelectOne" parameterType="int"
		resultMap="memberResultMap">
		SELECT MNO, MNAME, EMAIL, CRE_DATE
		FROM MEMBER
		WHERE MNO = #{no}
	</select>		
	
	<!-- 다이나믹쿼리를 통한 유효성검사(보통 화면에서 처리하는데 예시로 작업함) -->
	<update id="memberUpdateOne" parameterType="memberDto">
		UPDATE MEMBER
		<set>
			<if test="email != ''">EMAIL = #{email},</if>
			<if test="name != ''">MNAME = #{name},</if>
			<if test="password != ''">PWD = #{password},</if>
			
			MOD_DATE = SYSDATE
		</set>
		WHERE MNO = #{no}
	</update>
	
	<!-- parameterType 즉 넘겨받는 파라미터의 타입이 중요한것 -->
	<!-- 그러므로 #{value}, #{any} 받는 갯수만큼만 있으면 된다 -->
	<!-- 그러나 가독성이 중요하므로 전달받은 파라미터 변수명을 그대로쓰자 -->
	<delete id="memberDeleteOne" parameterType="int">
			DELETE FROM MEMBER
			WHERE MNO = #{no}
	</delete>
	
	<!-- 회원의 전체수를 반환 (멤버 조회시 같이 총카운트수를 센다)-->
	<select id="memberSelectTotalCount" resultType="java.lang.Integer" parameterType="map">
		SELECT COUNT(*)
		FROM MEMBER
		<include refid="search"></include>
	</select>

	<select id="fileselectList" parameterType="int" resultType="map">
		SELECT IDX, ORIGINAL_FILE_NAME, STORED_FILE_NAME,
		ROUND(FILE_SIZE/1024, 1) AS FILE_SIZE
		FROM TB_FILE
		WHERE PARENT_SEQ = #{no}
	</select>
	
	<select id="fileSelectStoredFileName" parameterType="int" resultType="map">
		SELECT IDX, STORED_FILE_NAME
		FROM TB_FILE
		WHERE PARENT_SEQ = #{parentSeq}
	</select>
	
	<delete id="fileDelete" parameterType="int">
		DELETE FROM TB_FILE
		WHERE PARENT_SEQ = #{parentSeq}
	</delete>
	
	<!-- 비밀번호 변경 -->
<update id="updatePw" parameterType="memberDto">
	update member set pwd = #{password} where email = #{email}
</update>

	<select id="readMember" parameterType="string"
		resultMap="memberResultMap">
		SELECT MNO, MNAME, EMAIL, CRE_DATE
		FROM MEMBER
		WHERE EMAIL = #{email}
	</select>	
	
		<select id="idCheck" parameterType="string"
		resultType="java.lang.Integer">
		SELECT COUNT(*)
		FROM MEMBER
		WHERE EMAIL = #{email}
	</select>
	

</mapper>