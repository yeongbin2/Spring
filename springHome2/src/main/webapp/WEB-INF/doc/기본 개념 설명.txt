		Statement 				 vs 		PreparedStatement

실행속도	실행할 때 마다 sql문을 컴파일한다	sql문을 미리 준비하여 컴파일해 둔다
									입력 매개변수 값만 추가하여 서버에 전송한다
									특히 여러번 반복하여 질의하는 경우, 실행속도가 빠름
바이너리
데이터 전송		불가능					가능

프로그래밍
편의성		sql문 안에 입력 매개변수 값이	sql문과 입력 매개변수가 분리되어 있어서 
			포함되어 있어서 sql문이		코드 작성이 편리하다
			복잡하고 매개변수가 여러 개인
			경우 코드 관리가 힘들다





Get 방식 특징
url에 데이터를 포함 -> 데이터 조회에 적합
바이너리 및 대용량 데이터 전송 불가
요청라인과 헤드 필드의 최대 크기 
	HTTP 사양에는 제한이 없음
	대용량 URL로 인한 문제 발생 
	
get 방식을 수행할 수 있는 방법
1. 웹 브라우저 주소창에  URL을입력하는 경우
2. 링크를 클릭하는 경우 -> a 태그, location 객체
3. form 태그의 method 값이 get 인 경우

get 요청 데이터 전달 방식
나중에 설명해줌
http://localhost:8090/JavascriptBasic/add.jsp?myName=psu&myAge=26

언제 사용할까?
특정 상품의 정보를 조회하는 것 처럼 데이터를 상대방에게 보여줘야 하는 경우 적합
결과 화면을 보관하거나 공유하고 싶다면 get 방식으로 화면을 구현해야 한다

문제점
보안에 좋지 않다
정보가 그대로 노출됨

바이너리 데이터를 전송할 수 없다.
데이터 전송의 크기 제약


Post 방식 특징

URL에 데이터가 포함되지 않음 -> 외부 노출 방지
메시지 본문에 데이터 포함 -> 실행 결과 공유 불가
바이너리 및 대용량 데이터 전송 가능

장점
입력값을 URL에 노출하지 않는다

단점
요청 결과를 공유할 수 없다


JSP 환경에서 현재 작업중인 페이지에서 다른 페이지로 이동하는 두가지 방식의
페이지 전환 기능이 있다

1.Redirect:
web container는 Redirect 명령이 들어오면 웹 브라우저에게 다른 페이지로 
이동하라고 명령을 내린다
그러면 웹 브라우저는 URL을 지시된 주소로 바꾸고 그 주소로 이동한다
이때 새로운 페이지에서는 request와 response 객체가 새롭게 생성된다

** 즉 처음 클라이언트가 입력했던 모든 내용들이 다음 페이지에서는 소실된다

2.Forward:
web container 차원에서 페이지 이동만 있다. 실제로 웹 브라우저는 다른 페이지로
이동했음을 알 수 없다. 그렇기 때문에, 브라우저에는 최초에 호출한 URL이 표시되고
이동한 페이지의 URL 정보는 볼 수 없다. 동일한 웹 컨테이너에 있는 페이지로만 
이동할 수 있다

** 현재 실행중인 페이지와 forward에 의해 호출될 페이지는 request와 response 객체를
공유한다






필터(Filter)
서블릿 실행 전후에 어떤 작업을 하고자 할 때 사용하는 기술이다

ex: 클라이언트가 보낸 데이터의 암호를 해제한다거나,
서블릿이 실행되기 전에 필요한 자원을 미리 준비한다거나,
서블릿이 실행될 때마다 로그를 남긴다거나 하는 작업을 
해야할 때 이곳에서 처리할 수 있다

필터를 사용하면 얻게되는 큰 장점으로는
각 서블릿마다 해당 코드를 삽입해야 하는 경우
번거롭게 모두 찾아서 제거해아 하므로 관리가 매우 번거로울 수 있다
이 필터를 통해 전체적인 코드 부분을 관리할 수 있어 매우 편리하다



MVC 패턴? 으로 코드화

MVC 아키텍처
모델(model)
데이터 저장소(ex: 데이터베이스등등)와 연동하여 사용자가 입력한 데이터나 
사용자에게 출력할 데이터를 다루는 일을 한다
특히 여러 개의 데이터 변경 작업(추가, 변경, 삭제)를 하나의 작업으로 묶는
트랜잭션을 다루는 일도 한다

**DTO(Data Transfer Object, 데이터 전송 객체)
데이터베이스 테이블에 해당하는 객체로 테이블의 컬럼들을 일대일로
저장할 수 있는 멤버필드가 있고 get/set 메서드를 갖는다
이들을 통하여 db와 웹 서버와의 데이터를 전송한다
오직 데이터만 전달하는 역할을 하며 로직은 구현하지 않는다


뷰(view)
모델이 처리한 데이터나 그 작업 결과를 가지고 사용자에게 출력할 화면을 
만드는 일을 한다. 이렇게 생성된 화면은 웹 브라우저가 출력한다
즉 뷰 컴포넌트는 HTML과 css, Javascript를 사용하여 웹 브라우저가
출력할 UI를 만든다

컨트롤러(controller)
클라이언트의 요청을 받았을 때 그 요청에 대해 실제 업무를 수행하는 model 컴포넌트를 호출하는
일을 한다
또한, 클라이언트가 보낸 데이터가 있다면 모델을 호출할 때 전달하기 쉽게
데이터를 적절히 가공하는 일을 한다
모델이 업무 수행을 완료하면, 그 결과를 가지고 화면을 생성하도록 뷰에게 전달한다
즉, 클라이언트 요청에 대해 모델과 뷰를 결정하여 전달하는 일을 한다
일종의 조정자


MVC 이점
1. 별도의 컴포턴트로 분리하였기 때문에 필요한 부분을 적절히 교체하여 손쉽게
사용자 화면을 바꿀 수 있다

2. 코드를 재사용 할 수 있다

3. 빠른 개발, 저렴한 비용 -> 개발 속도 향상

4. 코드의 난이도 하향

결국 전체적인 개발 및 유지보수 비용을 줄일 수 있다

jsp 전용 태그

스크립틀릿
<%
   자바 코드들
%>

표현식
익스프레션
<%=결과를 반환하는 자바 표현식%>


데이터 보관소

서블릿들이 서로 데이터를 공유하는 방법을 알아야 한다

4가지 객체 보관소 특징

1 - ServletContext 보관소
웹 애플리케이션이 시작될 때 생성되어 웹 애플리케이션이 종료될 때 까지 유지된다
이 보관소에 데이터를 보관하면 웹 애플리케이션이 실행되는 동안에는 모든
서블릿이 사용가능하다
jsp -> application

2 - HttpSession 보관소
클라이언트 최초 요청 시 생성되어 브라우저를 닫을 때 가지 유지된다
보통 로그인할 때 이 보관소를 초기화하고, 로그아웃하면 이 보관소에 
저장된 값들을 비운다
서블릿이나 jsp 페이지에 상관없이 로그아웃 하기 전까지 계속 값을 유지할 수 있다

jsp -> session

3 - ServletRequest 보관소
클라이언트 요청이 들어올 때 생성되어, 클라이언트에게 응답할 때까지 유지된다
이 보관소는 포워딩이나 인클루딩하는 서블릿들 사이에서 값을 공유한다

jsp -> request

4 - JspContext 보관소
나 자신이다

jsp -> pageContext

보관소 사용방법(전부 동일)
보관소 객체.setAttribute(키, 밸류); 값 저장
보관소 객체.getAttribute(키); 값 호출




JSP 액션(Action) 태그

jsp페이지를 작성할 때 가능한 자바 코드의 삽입을 최소화하는 것이
유지 보수에 좋다
이를 위해 JSP에서는 다양한 JSP전용 태그를 제공하고 있다
기본으로 제공하는 태그들을 JSP Action(액션)이라 한다

jsp 액션 태그를 사용하면 자바로 직접 코딩하는 것보다 빠르고
쉽게 원하는 기능을 작성할 수 있다

<jsp:~~~> 형식을 액션 태그라고 한다

<jsp:useBean>
자바 인스턴스를 준비한다
자바 인스턴스를 자바 빈(Bean)이라고 부른다

<jsp:include>
정적(html등) 또는 동적(서블릿,jsp등) 자원을 인클루딩하는 자바 코드를 생성한다






EL(Expression Language)
이엘 표기법

EL은 ${}을 사용하여 값을 즉시 표현한다

${}을 즉시 적용(immediate evaluation)이라고 부르기도 한다

콤마와 대괄호를 사용하여 자바 빈의 프로퍼티나 맵, 리스트, 배열 값등을
보다 쉽게 꺼내게 해주는 기술이다

EL을 사용하면 액션 태그를 사용하는 것보다 훨씬 더 간단히
보관소에 들어 있는 객체에 접근하여 값을 꺼내거나 메서드를 호출할 수 있다

EL 표기법 표현식
${memberDto.no}
${객체이름.프로퍼티(인스턴스변수명)} 


한국에서는 VO   Model을 다룰 때
VO(Value Object) 객체

DTO 외국

DTO와 유사한 개념이다
게터&세터 패턴 적용하면 된다


JSTL(JSP Standard Tag Library)
JSP 확장 태그
JSP 기본 태그가 아니다
JSTL 태그를 사용하면 JSP 페이지에서 자바 코딩을 줄일 수 있다
이는 웹 디자이너나 웹 퍼블리셔와의 공동 작업을 원활하게 진행할 수 있도록
도와준다

JSTL 주요 태그 사용법
태그 라이브러리 선언
<%@taglib uri="사용할 태그 라이브러리" prefix="접두사" %>

태그라이브러리		접두사
Core			c
fmt				fmt
등등

                 
<c:forEach var="변수명" items="목록데이터" begin="시작위치" end="종료위치"> 
   반복할 내용들
</c:forEach>


DAO(Data Access Object) 데이터 접근 객체

데이터베이스 관련된 작업(CRUD-Create, Retrieve, Update, Delete + Select)
을 담당하는 객체다
DAO안의 메서드는 모두 데이터베이스와 관련된 작업을 한다

DAO의 장점
업무 로직에서 데이터 처리 부분을 분리하여 별도의 객체로 정의하면,
여러 업무에서 공통으로 사용할 수 있기 때문에 유지보수가 쉬워지고
재사용성이 높아진다

데이터 처리를 전문으로 하는 객체이다














